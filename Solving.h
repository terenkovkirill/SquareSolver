/*!
\"C:\Users\KirillT\Desktop\SquareSolver\Head_Solving1.h"
\brief Заголовочный файл с описанием классов

Данный файл содержит в себе определения основных
классов, используемых в демонстрационной программе
*/


#ifndef SOLVING1_H
#define SOLVING1_H
#include <stdio.h>


const double Eps = 0.0001;  ///<Константа для сравнения чисел типа double


/// Набор возможных ответов при решении квадратного уравнения ax**2 + bx + c

enum Direct {
    NO_ROOTS = 0,       ///< Указывает, что у данного квадратного уравнения нет решений
    ONE_ROOT = 1,       ///< Указывает, что у квадратного уравнения одно решение
    TWO_ROOTS = 2,      ///< Указывает, что у квадратного уравнения два решения
    INFINITY_ROOTS = 3  ///< Указывает, что у квадратного уравнения бесконечное количество решений
};




///@brief: функция очищает буфер

///@return: 0 при считывании непробельного элемента
///@return: 1 при отсутствии непробельных элементов

///@details: функция последовательно считывает элементы с клавиатуры \
             до момента нахождения символа '\n'

int  CleanAndCheckBuffer();




///@brief: функция безопасного ввода данных

///@param: adrs_a - адрес первого коэффициента квадратного уравнения ax**2 + bx + c
///@param: adrs_b - адрес второго коэффициента квадратного уравнения ax**2 + bx + c
///@param: adrs_c - адрес третьего коэффициента квадратного уравнения ax**2 + bx + c

///@details: функция проверяет, было ли считанно ровно 3 коэффициента квадратного уравнения, \
             и все ли из считанных чисел принадлежат к типу double. В случае некорректного ввода \
             у пользователя запрашивается повторный ввод данных.

void InputData   (double *adrs_a, double *adrs_b, double *adrs_c);




///@brief: функция проверяет равны ли числа

///@param: 2 числа типа double

///@return: 0, если числа не равны
///@return: 1, если числа равны

bool IsEqual  (double num1, double num2);




///@brief: функция решает квадратное ax**2 + bx + c  с заданными коэффициентами

///@param: a - первый коэффициент квадратного уравнения
///@param: b - второй коэффициент квадратного уравнения
///@param: c - третий коэффициент квадратного уравнения
///@param: adrs_x1 - адрес для записи первого корня квадратного уравнения
///@param: adrs_x2 - адрес для записи второго корня квадратного уравнения

///@return: NO_ROOTS, если уравнение при заданных коэффициентах не имеет решений
///@return: ONE_ROOT, если уравнение имеет одно решение
///@return: TWO_ROOTS, если уравнение имеет 2 решение
///@return: INFINITY_ROOTS, если уравнение имеет бесконечное количество решений

///@details: функция определяет количество корней уравнения \
             и в зависимости от входных данных возвращает нужное значение

int  SolveSquare (double a, double b, double c, double *adrs_x1, double *adrs_x2);




///@brief: функция выводит ответ

///@param: nRoots - количество корней квадратного уравнения ax**2 +bx + c
///@param: x1 - первый корень квадратного уравнения
///@param: x2 - второй корень квадратного уравнения


///@return: NO_ROOTS, если уравнение при заданных коэффициентах не имеет решений
///@return: ONE_ROOT, если уравнение имеет одно решение
///@return: TWO_ROOTS, если уравнение имеет 2 решение
///@return: INFINITY_ROOTS, если уравнение имеет бесконечное количество решений

///@details: функция выводит корни квадратного уравнения и словесное описание \
             или предупреждает об ошибке

void PrintRoots  (int nRoots, double x1, double x2);

#endif
